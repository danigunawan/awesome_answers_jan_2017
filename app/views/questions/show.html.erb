<h1><%= @question.title %></h1>
<p><%= @question.body %></p>

<% if user_signed_in? && can?(:like, @question) %>
  <% if @question.liked_by?(current_user) %>
    <%= link_to "Un-Like", like_path(@question.like_for(current_user)), method: :delete %>
  <% else %>
    <%= link_to "Like", question_likes_path(@question), method: :post %>
  <% end %>
<% end %>

<%# pluralize is a helper method that takes a number as first argument and a word
as a second argument. It will pluralize the word based on the quantity represented
by the first argument. Finally, it will return them joined together
(e.g. pluralize(6, 'dog') # returns '6 dogs')
%>
(<%= pluralize @question.likes.count, 'like' %>)


<% if can?(:manage, @question) %>
  <%= link_to 'Edit', edit_question_path(@question) %>
  <%= link_to 'Delete', question_path(@question),
                        method: :delete,
                        data: { confirm: 'Are you sure?' } %>
<% end %>
<hr>
<h2>Answers</h2>
<h3>Create New Answer</h3>
<%#= form_for @answer, url: question_answers_path(@question) do |f| %>

<%# passing an array like this: [@question, @answer] to `form_for` will help us
    generate nested routes for our form. In this case `@question` must be a
    persisted record in the database. @answer can be either persisted or not.
    If it's not persisted, the URL generated will be:
     question_answers_path(@question). If it's persisted then the URL will be:
     question_answer_path(@question, @answer) %>
<%= @answer.errors.full_messages.join(', ') %>
<%= form_for [@question, @answer] do |f| %>
  <%= f.text_area :body %>
  <%= f.submit %>
<% end %>

<hr>
<% @question.answers.each do |ans| %>
  <%= ans.body %>
  <%= link_to 'delete', answer_path(ans) ,
                        method: :delete,
                        data: { confirm: 'Are you sure? '} %>
  <hr>
<% end %>
